name(training)
names(training)
hist(training$Superplasticizer)
y=log(training$Superplasticizer)
hist(y)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
x=training(,c(58,69))
x=training(,c(58,69))
x=training[,c(58,69)]
names(x)
x=training[,c(58:69)]
names(x)
x=training[,c(1,58:69)]
names(x)
model1=train(x$diagnosis~.,method="glm", preProcess="pca", data=x)
library(caret)
library(AppliedPredictiveModeling)
model1=train(x$diagnosis~.,method="glm", preProcess="pca", data=x)
install.packages("e1071")
library(e1071)
model1=train(x$diagnosis~.,method="glm", preProcess="pca", data=x)
model1
summary(model1)
list(model1)
summary(model1)
plot(model1)
names(model1)
model1$method
model1$modelInfo
model1$results
names(model1)
model1$metric
model1$finalModel
model1$finalModel[1]
model1$finalModel[2]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
#quiz 2
#qn 1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
hist(training$Superplasticizer)
table(training$Superplasticizer)
training$Superplasticizer==0
sum(training$Superplasticizer==0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
x=training[,c(1,58:96)]
names(x)
names(training)
x=training[,c(1,58:69)]
names(x)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation # 9
preProc$rotation # 9
names(x)
model1=train(x$diagnosis~. method="glm", preProcess="pca", data=x)
model1=train(x$diagnosis~. ,method="glm", preProcess="pca", data=x)
model1$rotation
model1$rotate
summary(model1)
model1=train(x$diagnosis~. ,method="glm", preProcess="pca", data=x,thresh=0.9)
summary(model1)
names(ss)
head(ss)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
ILpredictors
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
acc1 <- C1$overall[1]
acc1 # Non-PCA Accuracy: 0.65
modelFit <- train(training$diagnosis ~ .,
method="glm",
preProcess="pca",
data=training,
trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
acc2 <- C2$overall[1]
acc2 # PCA Accuracy: 0.72
acc1 # Non-PCA Accuracy: 0.65
predictors
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages(c("ape", "BH", "bit64", "BMA", "chron", "coxme", "DEoptimR", "devtools", "dplyr", "Formula", "gdata", "gmodels", "gridExtra", "gtools", "Hmisc", "httr", "igraph", "inline", "jsonlite", "KernSmooth", "lme4", "manipulate", "maps", "MASS", "mnormt", "mvtnorm", "nortest", "numDeriv", "party", "phangorn", "phytools", "plotrix", "plyr", "quantmod", "R6", "Rcpp", "RcppEigen", "RCurl", "rfigshare", "rJava", "rmarkdown", "RMySQL", "robustbase", "roxygen2", "rplos", "rstudioapi", "scales", "scatterplot3d", "stringi", "strucchange", "testthat", "tree", "TTR", "twitteR", "XML"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
data <- segmentationOriginal
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata) # 2.875
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logitModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
logitModel
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(logitModel, trainSA)
predictTest <- predict(logitModel, testSA)
# Training Set Misclassification rate
missClass(trainSA$chd, predictTrain) # 0.2727273
# Test Set Misclassification rate
missClass(testSA$chd, predictTest) # 0.3116883
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
dim(vowel.train) # 528  11
dim(vowel.test) # 462  11
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
library(randomforest)
library(randomRorest)
library(randomForest)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
library(rattle)
install.packages(rattle)
install.packages("rattle")
librar(rattle)
library(rattle)
library(rattle)
library(ratle)
library(rattle)
#qn1
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
library(caret)
# fit randomforest predictor relating the factor variable y
fitRf <- train(y ~ ., data=vowel.train, method="rf")
fitGBM <- train(y ~ ., data=vowel.train, method="gbm")
predRf <- predict(fitRf, vowel.test)
predGBM <- predict(fitGBM, vowel.test)
# RF Accuracy: 0.6060606
confusionMatrix(predRf, vowel.test$y)$overall[1]
# GBM Accuracy: 0.530303
confusionMatrix(predGBM, vowel.test$y)$overall[1]
pred <- data.frame(predRf, predGBM, y=vowel.test$y, agree=predRf == predGBM)
head(pred)
accuracy <- sum(predRf[pred$agree] == pred$y[pred$agree]) / sum(pred$agree)
accuracy # Agreement Accuracy: 0.6569579
rpart(fitRf)
fancyRplot(fitRf$finalMOdel)
fancyRpartPlot(fitRf$finalMOdel)
names(fitRf)
fancyRpartPlot(fitRf$finalModel)
fitRf$finalModel
importance(fitRf)
names(fitRf)
fitRf$bestTune
fitRf$method
fitRf$modelInfo
names(fitRf)
fitRf$metric
fitRf$maximize
fitRf$terms
fitRf$coefnames
View(vowel.train)
importance(firRf)
importance(fitRf)
library(randomForest)
importance(fitRf)
varImp(firRf$finalModel)
varImp(fitRf$finalModel)
summary(fitRf)
fitRf
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("shiny")
require(devtools)
require(devtools)
install_github('ramnathv/rCharts')
install.packages("googleVis")
library(devtools)
install_github(“shinyapps”)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
info()
ls()
tabPanel("456")
shiny::runApp('C:/Users/User/Desktop/testing123')
install.packages(c("animation", "coin", "CORElearn", "curl", "dplyr", "e1071", "git2r", "jsonlite", "kernlab", "kinship2", "lme4", "manipulate", "MASS", "party", "quantreg", "R6", "RcppArmadillo", "Rfacebook", "rmarkdown", "RMySQL", "rplos", "scales", "SparseM", "xml2"))
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages("installr") # install
installr::updateR() # updating R.
installr::updateR() # updating R.
installr::updateR() # updating R.
library(shiny)
shinyUI(fluidPage(
titlePanel("this is a fxxxxking title, botok"),
MainPanel(
tabsetPanel(
tabPanel("123"),
tabPanel("456")
)
)
)
)
library(shiny)
shinyUI(fluidPage(
titlePanel("this is a fxxxxking title, botok"),
MainPanel(
tabsetPanel(
tabPanel("123"),
tabPanel("456")
)
)
)
)
library(shiny)
shinyUI(fluidPage(
titlePanel("this is a fxxxxking title, botok"),
mainPanel(
tabsetPanel(
tabPanel("123"),
tabPanel("456")
)
)
)
)
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shinyUI(fluidPage(
titlePanel("this is a fxxxxking title, botok"),
mainPanel(
tabsetPanel(
tabPanel("123"),
tabPanel("456")
)
)
)
)
library(shiny)
shinyUI(fluidPage(
titlePanel("testing123"),
mainPanel(
tabsetPanel(
tabPanel("123"),
tabPanel("456")
)
)
))
shiny::runApp('C:/Users/User/Desktop/test_shiny')
library(shiny)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("wtf is data science"),
sidebarPanel(
h3('Sidebar 123456')
),
mainPanel(
h3('Main Panel fwtjwre')
)
))
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
shiny::runApp('C:/Users/User/Desktop/test_shiny')
x=runif(20,1,2)
x
x=runif(20,0,2)
x
y=round(x,1)
x
df=data.frame(x,4)
df=data.frame(x,t)
df=data.frame(x,y)
df
y=round(x)
df=data.frame(x,y)
df
x=floor(runif(1,0,3))
x
x=floor(runif(20,0,3))
x
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/rock_paper')
source('C:/Users/User/Desktop/test_shiny/rock_paper/server.R')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
fx=c("rock","rock","rock","paper","paper","paper","scissors","scissors","scissors")
fy=c("rock","paper","scissors","rock","paper","scissors","rock","paper","scissors")
fd=c("draw","lose","win","win","draw","lose","lose","win","draw")
xydc=data.frame(fx,fy,fd)
xydc
xydc$combine=paste(fx,fy)
xydc
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
xydc$combine==("rock paper")
xydc$fd[,xydc$combine==("rock paper")]
xydc$fd[xydc$combine==("rock paper")]
xydc$fd[xydc$combine==("rock paper"),]
xydc$fd[xydc$combine==("rock paper")]
acb=xydc$fd[xydc$combine==("rock paper")]
class(abc)
class(acb)
fx=c("rock","rock","rock","paper","paper","paper","scissors","scissors","scissors")
fy=c("rock","paper","scissors","rock","paper","scissors","rock","paper","scissors")
fd=c(1,2,3,3,1,2,2,3,1)
#draw=1, lose = 2, win = 3
xydc=data.frame(fx,fy,fd)
xydc$combine=paste(fx,fy)
acb=xydc$fd[xydc$combine==("rock paper")]
class(acb)
acb
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
fx=c("rock","rock","rock","paper","paper","paper","scissors","scissors","scissors")
fy=c("rock","paper","scissors","rock","paper","scissors","rock","paper","scissors")
fd=c(1,2,3,3,1,2,2,3,1)
#draw=1, lose = 2, win = 3
xydc=data.frame(fx,fy,fd)
xydc$combine=paste(fx,fy)
View(xydc)
table(xydc$combine)
shiny::runApp('C:/Users/User/Desktop/test_shiny/layout')
fx=c("rock","rock","rock","paper","paper","paper","scissors","scissors","scissors")
fy=c("rock","paper","scissors","rock","paper","scissors","rock","paper","scissors")
fd=c(1,2,3,3,1,2,2,3,1)
#draw=1, lose = 2, win = 3
xydc=data.frame(fx,fy,fd)
xydc$combine=paste(fx,fy)
xydc$end_result=ifelse(combine_xy()==("paper paper"|"rock rock"|"scissors scissors "),"images/again.png",ifelse(combine_xy()==("paper scissors"|"rock paper"|"scissors rock"),"images/lose.png","images/win.png"))
xydc$end_result=ifelse(combine)==("paper paper"|"rock rock"|"scissors scissors "),"images/again.png",ifelse(combine)==("paper scissors"|"rock paper"|"scissors rock"),"images/lose.png","images/win.png"))
xydc$end_result=ifelse(xydc$combine==("paper paper"|"rock rock"|"scissors scissors "),"images/again.png",ifelse(xydc$combine==("paper scissors"|"rock paper"|"scissors rock"),"images/lose.png","images/win.png"))
xydc
xydc$end_result=ifelse(xydc$combine==("paper paper"|"rock rock"|"scissors scissors"),"images/again.png",ifelse(xydc$combine==("paper scissors"|"rock paper"|"scissors rock"),"images/lose.png","images/win.png"))
xydc
xydc$end_result=ifelse(xydc$combine==("paper paper"),"images/again.png",ifelse(xydc$combine==("paper scissors"),"images/lose.png","images/win.png"))
xydc
xydc
library("devtools")
library("slidify")
library(knitr)
setwd("C:/Users/User/Desktop/school/IDA_MOOC/coursera2015/9.Developing Data Products/slidify_proj")
author("first_version_slide")
{img: "..img/app_screen.jpg"}
```{r eval=TRUE}
- This can also be further modify to suit each location or country to help user on lunch suggestion.
publish(title = 'project_ass_slides', 'index.html', host = 'rpubs')
